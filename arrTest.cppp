#include "AVLTree.h"
#include <iostream>
#include <random>
#include <algorithm>
#include <chrono>

using namespace std;

template<class T, class S>
void print2DUtil(TreeNode<T, S>* root, int space)
{
    // Base case
    if (root == NULL)
        return;
 
    // Increase distance between levels
    space += 10;
 
    // Process right child first
    print2DUtil(root->right, space);
 
    // Print current node after space
    // count
    cout << endl;
    for (int i = 10; i < space; i++)
        cout << " ";
    cout << root->key << "\n";
 
    // Process left child
    print2DUtil(root->left, space);
}
 
// Wrapper over print2DUtil()
void print2D(TreeNode<int, int>* root)
{
    // Pass initial space count as 0
    print2DUtil(root, 0);
}

int main() {
    std::array<int, 1000000> arr;
    for(int i=0; i<1000000; i++) {
        arr[i] = i;
    }
    unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
    std::shuffle(arr.begin(), arr.end(), std::default_random_engine(seed));

    AVLTree<int, int> a;
    for(int i=0; i<1000000; i++) {
        shared_ptr<int> y = shared_ptr<int>(new int(arr[i]));
        a.insert(y, arr[i]);
    }
    a.remove(5);
    a.remove(69);
    a.remove(300033);
    a.remove(1);

    return 0;
}